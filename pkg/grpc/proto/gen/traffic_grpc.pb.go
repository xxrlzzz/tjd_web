// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TrafficServiceClient is the client API for TrafficService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrafficServiceClient interface {
	ReceivePoints(ctx context.Context, opts ...grpc.CallOption) (TrafficService_ReceivePointsClient, error)
	ReceiveLines(ctx context.Context, opts ...grpc.CallOption) (TrafficService_ReceiveLinesClient, error)
	ReceiveMode(ctx context.Context, in *ModeRequest, opts ...grpc.CallOption) (*ReceiveResponse, error)
	QueryTraffic(ctx context.Context, in *TrafficRequest, opts ...grpc.CallOption) (*TrafficResponse, error)
}

type trafficServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrafficServiceClient(cc grpc.ClientConnInterface) TrafficServiceClient {
	return &trafficServiceClient{cc}
}

func (c *trafficServiceClient) ReceivePoints(ctx context.Context, opts ...grpc.CallOption) (TrafficService_ReceivePointsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TrafficService_serviceDesc.Streams[0], "/proto.TrafficService/ReceivePoints", opts...)
	if err != nil {
		return nil, err
	}
	x := &trafficServiceReceivePointsClient{stream}
	return x, nil
}

type TrafficService_ReceivePointsClient interface {
	Send(*PointRequest) error
	CloseAndRecv() (*ReceiveResponse, error)
	grpc.ClientStream
}

type trafficServiceReceivePointsClient struct {
	grpc.ClientStream
}

func (x *trafficServiceReceivePointsClient) Send(m *PointRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *trafficServiceReceivePointsClient) CloseAndRecv() (*ReceiveResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ReceiveResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *trafficServiceClient) ReceiveLines(ctx context.Context, opts ...grpc.CallOption) (TrafficService_ReceiveLinesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TrafficService_serviceDesc.Streams[1], "/proto.TrafficService/ReceiveLines", opts...)
	if err != nil {
		return nil, err
	}
	x := &trafficServiceReceiveLinesClient{stream}
	return x, nil
}

type TrafficService_ReceiveLinesClient interface {
	Send(*LineRequest) error
	CloseAndRecv() (*ReceiveResponse, error)
	grpc.ClientStream
}

type trafficServiceReceiveLinesClient struct {
	grpc.ClientStream
}

func (x *trafficServiceReceiveLinesClient) Send(m *LineRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *trafficServiceReceiveLinesClient) CloseAndRecv() (*ReceiveResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ReceiveResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *trafficServiceClient) ReceiveMode(ctx context.Context, in *ModeRequest, opts ...grpc.CallOption) (*ReceiveResponse, error) {
	out := new(ReceiveResponse)
	err := c.cc.Invoke(ctx, "/proto.TrafficService/ReceiveMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trafficServiceClient) QueryTraffic(ctx context.Context, in *TrafficRequest, opts ...grpc.CallOption) (*TrafficResponse, error) {
	out := new(TrafficResponse)
	err := c.cc.Invoke(ctx, "/proto.TrafficService/QueryTraffic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrafficServiceServer is the server API for TrafficService service.
// All implementations must embed UnimplementedTrafficServiceServer
// for forward compatibility
type TrafficServiceServer interface {
	ReceivePoints(TrafficService_ReceivePointsServer) error
	ReceiveLines(TrafficService_ReceiveLinesServer) error
	ReceiveMode(context.Context, *ModeRequest) (*ReceiveResponse, error)
	QueryTraffic(context.Context, *TrafficRequest) (*TrafficResponse, error)
	mustEmbedUnimplementedTrafficServiceServer()
}

// UnimplementedTrafficServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTrafficServiceServer struct {
}

func (UnimplementedTrafficServiceServer) ReceivePoints(TrafficService_ReceivePointsServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceivePoints not implemented")
}
func (UnimplementedTrafficServiceServer) ReceiveLines(TrafficService_ReceiveLinesServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveLines not implemented")
}
func (UnimplementedTrafficServiceServer) ReceiveMode(context.Context, *ModeRequest) (*ReceiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveMode not implemented")
}
func (UnimplementedTrafficServiceServer) QueryTraffic(context.Context, *TrafficRequest) (*TrafficResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTraffic not implemented")
}
func (UnimplementedTrafficServiceServer) mustEmbedUnimplementedTrafficServiceServer() {}

// UnsafeTrafficServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrafficServiceServer will
// result in compilation errors.
type UnsafeTrafficServiceServer interface {
	mustEmbedUnimplementedTrafficServiceServer()
}

func RegisterTrafficServiceServer(s grpc.ServiceRegistrar, srv TrafficServiceServer) {
	s.RegisterService(&_TrafficService_serviceDesc, srv)
}

func _TrafficService_ReceivePoints_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TrafficServiceServer).ReceivePoints(&trafficServiceReceivePointsServer{stream})
}

type TrafficService_ReceivePointsServer interface {
	SendAndClose(*ReceiveResponse) error
	Recv() (*PointRequest, error)
	grpc.ServerStream
}

type trafficServiceReceivePointsServer struct {
	grpc.ServerStream
}

func (x *trafficServiceReceivePointsServer) SendAndClose(m *ReceiveResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *trafficServiceReceivePointsServer) Recv() (*PointRequest, error) {
	m := new(PointRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TrafficService_ReceiveLines_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TrafficServiceServer).ReceiveLines(&trafficServiceReceiveLinesServer{stream})
}

type TrafficService_ReceiveLinesServer interface {
	SendAndClose(*ReceiveResponse) error
	Recv() (*LineRequest, error)
	grpc.ServerStream
}

type trafficServiceReceiveLinesServer struct {
	grpc.ServerStream
}

func (x *trafficServiceReceiveLinesServer) SendAndClose(m *ReceiveResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *trafficServiceReceiveLinesServer) Recv() (*LineRequest, error) {
	m := new(LineRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TrafficService_ReceiveMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrafficServiceServer).ReceiveMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TrafficService/ReceiveMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrafficServiceServer).ReceiveMode(ctx, req.(*ModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrafficService_QueryTraffic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrafficRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrafficServiceServer).QueryTraffic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TrafficService/QueryTraffic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrafficServiceServer).QueryTraffic(ctx, req.(*TrafficRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TrafficService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TrafficService",
	HandlerType: (*TrafficServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReceiveMode",
			Handler:    _TrafficService_ReceiveMode_Handler,
		},
		{
			MethodName: "QueryTraffic",
			Handler:    _TrafficService_QueryTraffic_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReceivePoints",
			Handler:       _TrafficService_ReceivePoints_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ReceiveLines",
			Handler:       _TrafficService_ReceiveLines_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "traffic.proto",
}
