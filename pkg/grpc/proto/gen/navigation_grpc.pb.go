// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// NavigationServiceClient is the client API for NavigationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NavigationServiceClient interface {
	// 接受导航请求, 返回导航点的流
	Navigation(ctx context.Context, in *NavigationRequest, opts ...grpc.CallOption) (NavigationService_NavigationClient, error)
}

type navigationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNavigationServiceClient(cc grpc.ClientConnInterface) NavigationServiceClient {
	return &navigationServiceClient{cc}
}

func (c *navigationServiceClient) Navigation(ctx context.Context, in *NavigationRequest, opts ...grpc.CallOption) (NavigationService_NavigationClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NavigationService_serviceDesc.Streams[0], "/proto.NavigationService/Navigation", opts...)
	if err != nil {
		return nil, err
	}
	x := &navigationServiceNavigationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NavigationService_NavigationClient interface {
	Recv() (*NavigationResponse, error)
	grpc.ClientStream
}

type navigationServiceNavigationClient struct {
	grpc.ClientStream
}

func (x *navigationServiceNavigationClient) Recv() (*NavigationResponse, error) {
	m := new(NavigationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NavigationServiceServer is the server API for NavigationService service.
// All implementations must embed UnimplementedNavigationServiceServer
// for forward compatibility
type NavigationServiceServer interface {
	// 接受导航请求, 返回导航点的流
	Navigation(*NavigationRequest, NavigationService_NavigationServer) error
	mustEmbedUnimplementedNavigationServiceServer()
}

// UnimplementedNavigationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNavigationServiceServer struct {
}

func (UnimplementedNavigationServiceServer) Navigation(*NavigationRequest, NavigationService_NavigationServer) error {
	return status.Errorf(codes.Unimplemented, "method Navigation not implemented")
}
func (UnimplementedNavigationServiceServer) mustEmbedUnimplementedNavigationServiceServer() {}

// UnsafeNavigationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NavigationServiceServer will
// result in compilation errors.
type UnsafeNavigationServiceServer interface {
	mustEmbedUnimplementedNavigationServiceServer()
}

func RegisterNavigationServiceServer(s grpc.ServiceRegistrar, srv NavigationServiceServer) {
	s.RegisterService(&_NavigationService_serviceDesc, srv)
}

func _NavigationService_Navigation_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NavigationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NavigationServiceServer).Navigation(m, &navigationServiceNavigationServer{stream})
}

type NavigationService_NavigationServer interface {
	Send(*NavigationResponse) error
	grpc.ServerStream
}

type navigationServiceNavigationServer struct {
	grpc.ServerStream
}

func (x *navigationServiceNavigationServer) Send(m *NavigationResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _NavigationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.NavigationService",
	HandlerType: (*NavigationServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Navigation",
			Handler:       _NavigationService_Navigation_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "navigation.proto",
}
